import { readDate, writeObject } from "./base";
import { UserPlaylogItem } from "../model/userPlaylog";

export interface UserPlaylogJson {
  sortNumber: number;
  placeId: number;
  placeName: string;
  playDate: string;
  userPlayDate: string;
  musicId: number;
  level: number;
  playKind: number;
  eventId: number;
  eventName: string;
  eventPoint: number;
  playedUserId1: number;
  playedUserId2: number;
  playedUserId3: number;
  playedUserName1: string;
  playedUserName2: string;
  playedUserName3: string;
  playedMusicLevel1: number;
  playedMusicLevel2: number;
  playedMusicLevel3: number;
  cardId1: number;
  cardId2: number;
  cardId3: number;
  cardLevel1: number;
  cardLevel2: number;
  cardLevel3: number;
  cardAttack1: number;
  cardAttack2: number;
  cardAttack3: number;
  bossCharaId: number;
  bossLevel: number;
  bossAttribute: number;
  clearStatus: number;
  techScore: number;
  techScoreRank: number;
  battleScore: number;
  battleScoreRank: number;
  maxCombo: number;
  judgeMiss: number;
  judgeHit: number;
  judgeBreak: number;
  judgeCriticalBreak: number;
  rateTap: number;
  rateHold: number;
  rateFlick: number;
  rateSideTap: number;
  rateSideHold: number;
  bellCount: number;
  totalBellCount: number;
  damageCount: number;
  overDamage: number;
  isTechNewRecord: boolean;
  isBattleNewRecord: boolean;
  isOverDamageNewRecord: boolean;
  isFullCombo: boolean;
  isFullBell: boolean;
  isAllBreak: boolean;
  playerRating: number;
  battlePoint: number;
}

export function readUserPlaylog(json: UserPlaylogJson): UserPlaylogItem {
  return {
    sortNumber: json.sortNumber,
    placeId: json.placeId,
    placeName: json.placeName,
    playDate: readDate(json.playDate),
    userPlayDate: readDate(json.userPlayDate),
    musicId: json.musicId,
    level: json.level,
    playKind: json.playKind,
    eventId: json.eventId,
    eventName: json.eventName,
    eventPoint: json.eventPoint,
    playedUserId1: json.playedUserId1,
    playedUserId2: json.playedUserId2,
    playedUserId3: json.playedUserId3,
    playedUserName1: json.playedUserName1,
    playedUserName2: json.playedUserName2,
    playedUserName3: json.playedUserName3,
    playedMusicLevel1: json.playedMusicLevel1,
    playedMusicLevel2: json.playedMusicLevel2,
    playedMusicLevel3: json.playedMusicLevel3,
    cardId1: json.cardId1,
    cardId2: json.cardId2,
    cardId3: json.cardId3,
    cardLevel1: json.cardLevel1,
    cardLevel2: json.cardLevel2,
    cardLevel3: json.cardLevel3,
    cardAttack1: json.cardAttack1,
    cardAttack2: json.cardAttack2,
    cardAttack3: json.cardAttack3,
    bossCharaId: json.bossCharaId,
    bossLevel: json.bossLevel,
    bossAttribute: json.bossAttribute,
    clearStatus: json.clearStatus,
    techScore: json.techScore,
    techScoreRank: json.techScoreRank,
    battleScore: json.battleScore,
    battleScoreRank: json.battleScoreRank,
    maxCombo: json.maxCombo,
    judgeMiss: json.judgeMiss,
    judgeHit: json.judgeHit,
    judgeBreak: json.judgeBreak,
    judgeCriticalBreak: json.judgeCriticalBreak,
    rateTap: json.rateTap,
    rateHold: json.rateHold,
    rateFlick: json.rateFlick,
    rateSideTap: json.rateSideTap,
    rateSideHold: json.rateSideHold,
    bellCount: json.bellCount,
    totalBellCount: json.totalBellCount,
    damageCount: json.damageCount,
    overDamage: json.overDamage,
    isTechNewRecord: json.isTechNewRecord,
    isBattleNewRecord: json.isBattleNewRecord,
    isOverDamageNewRecord: json.isOverDamageNewRecord,
    isFullCombo: json.isFullCombo,
    isFullBell: json.isFullBell,
    isAllBreak: json.isAllBreak,
    playerRating: json.playerRating,
    battlePoint: json.battlePoint,
  };
}
